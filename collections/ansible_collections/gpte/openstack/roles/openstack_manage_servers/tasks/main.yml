- name: Create server instances
  os_server:
 #   cloud:            "{{ __openstack_server.openstack_cloud                           | default('openstack') }}"
    name:             "{{ __openstack_server.instance_name }}"
    state:            "{{ openstack_server_state                    | default(__openstack_server.state) | default('present') }}"
    image:            "{{ __openstack_server.image                  | default('rhel-8.3') }}"
    flavor:           "{{ __openstack_server.flavor                 | default('GLOBAL-CPU_4_Memory_32768_Disk_60_flavor') }}"
    key_name:         "{{ __openstack_server.key_name               | default('ansible_ssh_key') }}"
    wait:             "{{ __openstack_server.wait                   | default('yes') }}"
    security_groups:  "{{ __openstack_server.security_group_name }}"
    delete_fip:       "{{__openstack_server.delete_fip              | default(false) }}"
    public_ip:         "{{__openstack_server.public_ip              | default(false) }}"
    meta: "AnsibleGroup={{ __openstack_server.AnsibleGroup }},deployment_name={{ __openstack_server.deployment }}"
    nics:
      - net-name: "{{ __openstack_server.network }}"
  loop: "{{ openstack_servers }}"
  loop_control:
    loop_var: __openstack_server
  async: 900
  poll: 0
  register: r_instances

- name: Wait for async OSP instance creation to complete
  async_status: "jid={{ item.ansible_job_id }}"
  register: r_wait
  until: r_wait.finished
  retries: 900
  loop: "{{ r_instances.results }}"

#- name: Debug instances
#  debug:
#    msg: "Server is {{ __instance.__openstack_server.instance_name }}"
#    verbosity: 2
#  loop: "{{ r_instances.results }}"
#  loop_control:
#    loop_var: __instance


- when: openstack_server_state != 'absent' | default(true)
  block:

     - name: Get Openstack server info
       os_server_info:
  #       cloud:     "{{ __openstack_server.openstack_cloud   | default('openstack') }}"
         server:      "{{ __openstack_server.instance_name }}"
       loop: "{{ openstack_servers }}"
       loop_control:
         loop_var: __openstack_server
       register: s_instances
     - debug: var=item.1.private_v4
       loop: "{{ s_instances.results|subelements('openstack_servers') }}"

     - name: Wait for servers by name to be available
       wait_for:
         host: "{{ __ip.1.private_v4 }}"
         port: 22
         search_regex: OpenSSH
         timeout: 600
       loop: "{{ s_instances.results|subelements('openstack_servers') }}"
       loop_control:
         loop_var: __ip
       delegate_to: "{{ inventory_hostname }}"
...

